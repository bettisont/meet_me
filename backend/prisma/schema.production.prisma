// This is your Prisma schema file for production with PostgreSQL
// Copy this over schema.prisma when deploying to production

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations for future features
  sessions      Session[]
  savedSearches SavedSearch[]
  groups        GroupMember[]
  
  @@index([email])
  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([token])
  @@index([userId])
  @@map("sessions")
}

model SavedSearch {
  id          String   @id @default(cuid())
  userId      String
  name        String
  postcodes   String[] // Array of postcodes
  venueType   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@map("saved_searches")
}

model Group {
  id          String        @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  members     GroupMember[]
  meetups     Meetup[]
  
  @@map("groups")
}

model GroupMember {
  id        String   @id @default(cuid())
  userId    String
  groupId   String
  role      String   @default("member") // member, admin
  joinedAt  DateTime @default(now())
  
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  
  @@unique([userId, groupId])
  @@index([userId])
  @@index([groupId])
  @@map("group_members")
}

model Meetup {
  id          String   @id @default(cuid())
  groupId     String
  title       String
  description String?
  postcodes   String[]
  venueType   String
  venueName   String?
  venueAddress String?
  scheduledAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  
  @@index([groupId])
  @@index([scheduledAt])
  @@map("meetups")
}

// Venue cache for performance
model VenueCache {
  id           String   @id @default(cuid())
  postcodeHash String   @unique // Hash of sorted postcodes + venue type
  venueType    String
  midpointLat  Float
  midpointLng  Float
  venues       Json     // Cached venue data
  createdAt    DateTime @default(now())
  expiresAt    DateTime // Cache expiry
  
  @@index([postcodeHash])
  @@index([expiresAt])
  @@map("venue_cache")
}